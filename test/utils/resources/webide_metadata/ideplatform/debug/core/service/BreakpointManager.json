{
  "name": "sap.watt.ideplatform.debug.core.service.BreakpointManager",
  "description": "The breakpoint manager manages the collection of breakpoints. The kinds of breakpoints supported by each debugger domain and the information required to create those breakpoints is defined by the domain. Breakpoint creation is a client responsibility. Clients may register for  breakpoint change notifications - see BreakpointChangeEvent and BreakpointManagerChangeEvent",
  "methods": {
    "getModel": {
      "description": "Returns the model representation associated with this breakpoint manager to be used for data bindings.",
      "returns": {
        "type": "object",
        "description": "The model to be used for data bindings."
      }
    },
    "setEnabled": {
      "description": "Sets the enabled state of this breakpoint manager.",
      "params": [
        {
          "name": "enabled",
          "type": "boolean",
          "description": "The enablement value."
        }
      ]
    },
    "getEnabled": {
      "description": "Returns whether or not this breakpoint manager is enabled.",
      "returns": {
        "type": "boolean",
        "description": "True if the breakpoint is enabled, false otherwise."
      }
    },
    "addBreakpoint": {
      "description": "Adds the given breakpoint to the collection of registered breakpoints and notifies all registered listeners. This has no effect if the given breakpoint is already registered.",
      "params": [
        {
          "name": "breakpoint",
          "type": "sap.watt.ideplatform.debug.core.model.Breakpoint",
          "description": "The breakpoint to add."
        }
      ]
    },
    "addBreakpoints": {
      "description": "Adds the given breakpoints to the collection of registered breakpoints and notifies all registered listeners. This has no effect if the given breakpoint is already registered.",
      "params": [
        {
          "name": "breakpoints",
          "type": "array",
          "items": {
            "type": "sap.watt.ideplatform.debug.core.model.Breakpoint"
          },
          "description": "The breakpoints to add."
        }
      ]
    },
    "removeBreakpoint": {
      "description": "Removes the breakpoint from the collection of registered breakpoints and notifies all registered listeners.",
      "params": [
        {
          "name": "breakpoint",
          "type": "sap.watt.ideplatform.debug.core.model.Breakpoint",
          "description": "The breakpoint to remove."
        }
      ],
      "returns": {
        "type": "sap.watt.ideplatform.debug.core.model.Breakpoint",
        "description": "The breakpoint if present, <code>undefined</code> otherwise."
      }
    },
    "removeBreakpoints": {
      "description": "Removes the given breakpoints from the collection of registered breakpoints and notifies all registered listeners.",
      "params": [
        {
          "name": "breakpoints",
          "type": "array",
          "items": {
            "type": "sap.watt.ideplatform.debug.core.model.Breakpoint"
          },
          "description": "The breakpoints to remove."
        }
      ]
    },
    "getBreakpoints": {
      "description": "Returns an array of breakpoints registered for the given debug model identifier. If the identifier is omitted all registered breakpoints are returned.",
      "params": [
        {
          "name": "debugModelId",
          "type": "string",
          "optional": true,
          "description": "The debug model identifier."
        }
      ],
      "returns": {
        "type": "array",
        "items": {
          "type": "sap.watt.ideplatform.debug.core.model.Breakpoint"
        },
        "description": "The breakpoints matching the given debug model identifier or all breakpoints if omitted."
      }
    }
  },
  "events": {
    "breakpointsChanged": {
      "description": "Notifies listeners that breakpoint(s) have been added, removed or changed.",
      "params": [
        {
          "name": "changes",
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Breakpoint change details."
        }
      ]
    },
    "breakpointManagerEnablementChanged": {
      "description": "Notifies listeners that the breakpoint manager's enablement has changed.",
      "params": [
        {
          "name": "enabled",
          "type": "boolean",
          "description": "The new enablement state."
        }
      ]
    }
  }
}
